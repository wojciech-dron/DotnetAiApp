@page "/"
@rendermode InteractiveServer

<PageTitle>Nbp gold prices</PageTitle>
<EditForm Model=@request OnSubmit=FetchGoldPrices>
    <Validate />

    <div class="mb-3">
        <div class="form-floating mb-3">
            <InputDate class="form-control" @bind-Value="request.StartDate" />
            <label>Start date</label>
            <ValidationMessage For=@(() => request.StartDate) />
        </div>

        <div class="form-floating mb-3">
            <InputDate class="form-control" @bind-Value="request.EndDate" />
            <label>End date</label>
            <ValidationMessage For=@(() => request.EndDate) />
        </div>

        <button class="btn btn-primary" @onclick="FetchGoldPrices">Fetch gold prices</button>
    </div>
</EditForm>


@if (result?.IsSuccess == true)
{
    <div class="mb-3">
        <h3>Results:</h3>
        <p>Start date price: @result.StartDatePrice.ToString("F2")</p>
        <p>End date price: @result.EndDatePrice.ToString("F2")</p>
        <p>Average price: @result.AveragePrice.ToString("F2")</p>
    </div>
}

<ErrorMessage Result="@result" />


@inject IMediator Mediator
@inject ITimeProvider TimeProvider
@using MediatR
@using Morris.Blazor.Validation
@using NbpApp.Utils.Utils
@using NbpApp.Web.Logic

@code {
    private GoldPriceResult? result;
    private GetAndSaveGoldPrices.Command request;

    protected override void OnInitialized() => request = new()
    {
        StartDate = TimeProvider.CurrentDate.AddDays(-30),
        EndDate = TimeProvider.CurrentDate
    };

    private async Task FetchGoldPrices()
    {
        result = await Mediator.Send(request);
    }
}